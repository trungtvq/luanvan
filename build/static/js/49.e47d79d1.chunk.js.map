{"version":3,"sources":["components/Picker/Picker.js","components/Posts/Posts.js","components/AsyncApp/AsyncApp.js"],"names":["Picker","_this$props","this","props","value","onChange","options","react_default","a","createElement","className","e","target","map","option","key","Component","Posts","posts","post","i","title","AsyncApp","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleRefreshClick","dispatch","selectedSubreddit","fetchPostsIfNeeded","prevProps","_this$props2","nextSubreddit","selectSubreddit","preventDefault","_this$props3","invalidateSubreddit","_this$props4","isFetching","lastUpdated","Picker_Picker","Date","toLocaleTimeString","onClick","length","style","opacity","Posts_Posts","connect","state","_ref","postsBySubreddit","items"],"mappings":"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","file":"static/js/49.e47d79d1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Picker extends Component {\n  render() {\n    const { value, onChange, options } = this.props\n\n    return (\n      <div className=\"animated fadeIn\">\n      <span>\n        <h1>{value}</h1>\n        <select onChange={e => onChange(e.target.value)} value={value}>\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </span>\n      </div>\n    )\n  }\n}\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Posts extends Component {\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n      <ul>\n        {this.props.posts.map((post, i) => (\n          <li key={i}>{post.title}</li>\n        ))}\n      </ul>\n      </div>\n    )\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  selectSubreddit,\n  fetchPostsIfNeeded,\n  invalidateSubreddit\n} from '../../actions'\n\nimport Picker from '../Picker'\nimport Posts from '../Posts'\n\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange(nextSubreddit) {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div className=\"animated fadeIn\">\n      <div>\n        <Picker\n          value={selectedSubreddit}\n          onChange={this.handleChange}\n          options={['reactjs', 'frontend']}\n        />\n        <p>\n          {lastUpdated && (\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\n            </span>\n          )}\n          {!isFetching && (\n            <button onClick={this.handleRefreshClick}>Refresh</button>\n          )}\n        </p>\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\n        {posts.length > 0 && (\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        )}\n      </div>\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\n    selectedSubreddit\n  ] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)\n"],"sourceRoot":""}