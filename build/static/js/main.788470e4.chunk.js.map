{"version":3,"sources":["actions/index.js","contexts/authContext.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","REQUEST_POSTS","RECEIVE_POSTS","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","selectSubreddit","invalidateSubreddit","fetchPostsIfNeeded","subreddit","type","fetchPosts","dispatch","requestPosts","fetch","concat","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","react__WEBPACK_IMPORTED_MODULE_0__","authContext","n","React","createContext","token","signInEmail","login","logout","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","defineProperty","items","lastUpdated","selectedSubreddit","loading","react_default","a","createElement","className","client","ApolloClient","uri","DefaultLayout","Loadable","loader","Promise","all","e","bind","Login","Register","Page404","Page500","PagePay","AsyncApp","HomeMain","HomeContact","HomeService","HomeSolve","HomePayment","Demo","AllProject","ProjectDone","ProjectTodo","CreateProject","ProfileDetail","ProfileEdit","loggerMiddleware","createLogger","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","App","_this","setState","react_redux_es","react_apollo_esm","Provider","value","this","BrowserRouter","Switch","Route","exact","path","name","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.788470e4.chunk.js","sourcesContent":["//import fetch from 'cross-fetch'\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\r\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\r\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\r\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\r\n\r\nexport function selectSubreddit(subreddit) {\r\n  return {\r\n    type: SELECT_SUBREDDIT,\r\n    subreddit\r\n  }\r\n}\r\n\r\nexport function invalidateSubreddit(subreddit) {\r\n  return {\r\n    type: INVALIDATE_SUBREDDIT,\r\n    subreddit\r\n  }\r\n}\r\n\r\nfunction requestPosts(subreddit) {\r\n  return {\r\n    type: REQUEST_POSTS,\r\n    subreddit\r\n  }\r\n}\r\n\r\nfunction receivePosts(subreddit, json) {\r\n  return {\r\n    type: RECEIVE_POSTS,\r\n    subreddit,\r\n    posts: json.data.children.map(child => child.data),\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\nfunction fetchPosts(subreddit) {\r\n  return dispatch => {\r\n    dispatch(requestPosts(subreddit))\r\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\r\n      .then(response => response.json())\r\n      .then(json => dispatch(receivePosts(subreddit, json)))\r\n  }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  if (!posts) {\r\n    return true\r\n  } else if (posts.isFetching) {\r\n    return false\r\n  } else {\r\n    return posts.didInvalidate\r\n  }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchPosts(getState(), subreddit)) {\r\n      return dispatch(fetchPosts(subreddit))\r\n    }\r\n  }\r\n}","import React from \"react\";\r\nconst authContext = React.createContext({\r\n\ttoken:null,\r\n\tsignInEmail: null,\r\n\tlogin: (token,signInEmail)=>{},\r\n\tlogout: ()=>{}\r\n});\r\nexport default authContext;\r\n","import { combineReducers } from 'redux'\r\nimport {\r\n  SELECT_SUBREDDIT,\r\n  INVALIDATE_SUBREDDIT,\r\n  REQUEST_POSTS,\r\n  RECEIVE_POSTS\r\n} from '../actions'\r\n\r\nfunction selectedSubreddit(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_SUBREDDIT:\r\n      return action.subreddit\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction posts(\r\n  state = {\r\n    isFetching: false,\r\n    didInvalidate: false,\r\n    items: []\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n      return Object.assign({}, state, {\r\n        didInvalidate: true\r\n      })\r\n    case REQUEST_POSTS:\r\n      return Object.assign({}, state, {\r\n        isFetching: true,\r\n        didInvalidate: false\r\n      })\r\n    case RECEIVE_POSTS:\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        items: action.posts,\r\n        lastUpdated: action.receivedAt\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction postsBySubreddit(state = {}, action) {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n    case RECEIVE_POSTS:\r\n    case REQUEST_POSTS:\r\n      return Object.assign({}, state, {\r\n        [action.subreddit]: posts(state[action.subreddit], action)\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  postsBySubreddit,\r\n  selectedSubreddit\r\n})\r\n\r\nexport default rootReducer","//style \r\nimport './App.scss';\r\n\r\nimport React, { Component } from 'react';\r\n\r\n//context\r\nimport authContext from \"./contexts/authContext\";///////\r\n\r\n\r\n//Appolo\r\nimport ApolloClient from 'apollo-boost';\r\nimport {AppoloProvider, ApolloProvider} from 'react-apollo';\r\n\r\n\r\n\r\nimport { HashRouter, BrowserRouter,Route, Switch } from 'react-router-dom';\r\n\r\n\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\n//redux\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\nimport { Provider } from 'react-redux'\r\n\r\n//loading async with text \"Loading\"\r\nimport Loadable from 'react-loadable';\r\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\r\n\r\n//apollo client setup\r\nconst client = new ApolloClient({\r\n  uri:'https://overlead.co/api/graphql'\r\n})\r\n\r\n\r\n// Containers layout\r\nconst DefaultLayout = Loadable({\r\n  loader: () => import('./containers/DefaultLayout'),\r\n  loading\r\n});\r\n\r\n// Pages no layout\r\nconst Login = Loadable({\r\n  loader: () => import('./views/Pages/Login'),\r\n  loading\r\n});\r\n\r\nconst Register = Loadable({\r\n  loader: () => import('./views/Pages/Register'),\r\n  loading\r\n});\r\n\r\nconst Page404 = Loadable({\r\n  loader: () => import('./views/Pages/Page404'),\r\n  loading\r\n});\r\n\r\nconst Page500 = Loadable({\r\n  loader: () => import('./views/Pages/Page500'),\r\n  loading\r\n});\r\nconst PagePay = Loadable({\r\n  loader: () => import('./views/Pages/PagePay'),\r\n  loading\r\n});\r\n\r\nconst AsyncApp= Loadable({\r\n  loader: ()=> import('./components/AsyncApp'),\r\n  loading\r\n})\r\n\r\n\r\n\r\n//Home\r\nconst HomeMain = Loadable({\r\n  loader: () => import('./views/General/Home/Main'),\r\n  loading\r\n});\r\nconst HomeContact = Loadable({\r\n  loader: () => import('./views/General/Home/Contact'),\r\n  loading\r\n});\r\nconst HomeService = Loadable({\r\n  loader: () => import('./views/General/Home/Service'),\r\n  loading\r\n});\r\nconst HomeSolve = Loadable({\r\n  loader: () => import('./views/General/Home/Solve'),\r\n  loading\r\n});\r\nconst HomePayment = Loadable({\r\n  loader: () => import('./views/General/Home/Payment'),\r\n  loading\r\n});\r\n//\r\nconst Demo = Loadable({\r\n  loader: () => import('./homeNav'),\r\n  loading\r\n});\r\n\r\n//PJ\r\nconst AllProject = Loadable({\r\n  loader: () => import('./views/Personal/Project/AllProject'),\r\n  loading\r\n});\r\nconst ProjectDone = Loadable({\r\n  loader: () => import('./views/Personal/Project/ProjectDone'),\r\n  loading\r\n});\r\nconst ProjectTodo = Loadable({\r\n  loader: () => import('./views/Personal/Project/ProjectTodo'),\r\n  loading\r\n});\r\nconst CreateProject = Loadable({\r\n  loader: () => import('./views/Personal/Project/CreateProject'),\r\n  loading\r\n});\r\n//\r\n\r\n\r\n//profile\r\nconst ProfileDetail = Loadable({\r\n  loader: () => import('./views/Personal/Profile/detail'),\r\n  loading\r\n});\r\nconst ProfileEdit = Loadable({\r\n  loader: () => import('./views/Personal/Profile/edit'),\r\n  loading\r\n});\r\n//\r\nconst loggerMiddleware = createLogger()\r\n\r\nfunction configureStore(preloadedState) {\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n  )\r\n}\r\n\r\nconst store = configureStore()\r\n // <Route exact path=\"/AllProject\" name=\"AllProject\" component={AllProject} />\r\n                      // <Route exact path=\"/ProjectDone\" name=\"ProjectDone\" component={ProjectDone} />\r\n                      // <Route exact path=\"/ProjectTodo\" name=\"ProjectTodo\" component={ProjectTodo} />\r\n\r\n//{ path: '/Home/Main', exact: true, name: 'HomeMain', component: HomeMain },\r\n  // { path: '/Home/Contact', exact: true, name: 'HomeContact', component: HomeContact },\r\n  // { path: '/Home/Service', exact: true, name: 'HomeService', component: HomeService },\r\n  // { path: '/Home/Solve', exact: true, name: 'HomeSolve', component: HomeSolve},\r\n\r\nclass App extends Component {\r\n  state={\r\n    token:null,\r\n    signInEmail:null\r\n  }\r\n\r\n  login = (token,signInEmail)=>{\r\n    this.setState({ token : token , signInEmail : signInEmail });\r\n  }\r\n  logout = ()=>{\r\n    this.setState({ token : null , signInEmail : null });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <ApolloProvider client={client}>\r\n          <authContext.Provider \r\n            value={{\r\n                      token:this.state.token,\r\n                      signInEmail:this.state.signInEmail,\r\n                      login:this.login,\r\n                      logout:this.logout\r\n                  }}>  \r\n            <BrowserRouter>\r\n                <Switch>\r\n                <Route exact path=\"/homeNav\" name=\"HomeNav\" component={Demo} />\r\n                      <Route exact path=\"/Home/Main\" name=\"HomeMain\" component={HomeMain} />\r\n                      <Route exact path=\"/Home/Contact\" name=\"HomeContact\" component={HomeContact} />\r\n                      <Route exact path=\"/Home/Service\" name=\"HomeService\" component={HomeService} />\r\n                      <Route exact path=\"/Home/Solve\" name=\"HomeSolve\" component={HomeSolve} />\r\n                      <Route exact path=\"/Home/Payment\" name=\"HomePayment\" component={HomePayment} />\r\n\r\n                       <Route exact path=\"/AllProject\" name=\"AllProject\" component={AllProject} />\r\n                       <Route exact path=\"/ProjectDone\" name=\"ProjectDone\" component={ProjectDone} />\r\n                       <Route exact path=\"/ProjectTodo\" name=\"ProjectTodo\" component={ProjectTodo} />\r\n                        <Route exact path=\"/CreateProject\" name=\"CreateProject\" component={CreateProject} />\r\n                     \r\n                      <Route exact path=\"/Profile/Detail\" name=\"ProfileDetail\" component={ProfileDetail} />\r\n                      <Route exact path=\"/Profile/Edit\" name=\"ProjectTodo\" component={ProfileEdit} />\r\n    \r\n\r\n\r\n                      <Route exact path=\"/login\" name=\"Login Page\" component={Login} />\r\n                      <Route exact path=\"/register\" name=\"Register Page\" component={Register} />\r\n                      <Route exact path=\"/404\" name=\"Page 404\" component={Page404} />\r\n                      <Route exact path=\"/500\" name=\"Page 500\" component={Page500} />\r\n                      <Route exact path=\"/pay\" name=\"Page Pay\" component={PagePay} />\r\n                      <Route exact path=\"/async\" name=\"page test\" component={AsyncApp} />\r\n                      <Route path=\"/\" name=\"Home\" component={DefaultLayout} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n          </authContext.Provider>  \r\n          </ApolloProvider>\r\n    </Provider>   \r\n)}}\r\n\r\nApp.propTypes = {\r\n  store: PropTypes.object.isRequired\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}