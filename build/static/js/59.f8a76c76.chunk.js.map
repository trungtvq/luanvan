{"version":3,"sources":["components/Picker/Picker.js","components/Posts/Posts.js","components/AsyncApp/AsyncApp.js"],"names":["Picker","_this$props","this","props","value","onChange","options","react_default","a","createElement","className","e","target","map","option","key","Component","Posts","posts","post","i","title","AsyncApp","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleRefreshClick","dispatch","selectedSubreddit","fetchPostsIfNeeded","prevProps","_this$props2","nextSubreddit","selectSubreddit","preventDefault","_this$props3","invalidateSubreddit","_this$props4","isFetching","lastUpdated","Picker_Picker","Date","toLocaleTimeString","onClick","length","style","opacity","Posts_Posts","connect","state","_ref","postsBySubreddit","items"],"mappings":"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","file":"static/js/59.f8a76c76.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Picker extends Component {\r\n  render() {\r\n    const { value, onChange, options } = this.props\r\n\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n      <span>\r\n        <h1>{value}</h1>\r\n        <select onChange={e => onChange(e.target.value)} value={value}>\r\n          {options.map(option => (\r\n            <option value={option} key={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPicker.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Posts extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n      <ul>\r\n        {this.props.posts.map((post, i) => (\r\n          <li key={i}>{post.title}</li>\r\n        ))}\r\n      </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPosts.propTypes = {\r\n  posts: PropTypes.array.isRequired\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  selectSubreddit,\r\n  fetchPostsIfNeeded,\r\n  invalidateSubreddit\r\n} from '../../actions'\r\n\r\nimport Picker from '../Picker'\r\nimport Posts from '../Posts'\r\n\r\nclass AsyncApp extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { dispatch, selectedSubreddit } = this.props\r\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\r\n      const { dispatch, selectedSubreddit } = this.props\r\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n    }\r\n  }\r\n\r\n  handleChange(nextSubreddit) {\r\n    this.props.dispatch(selectSubreddit(nextSubreddit))\r\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\r\n  }\r\n\r\n  handleRefreshClick(e) {\r\n    e.preventDefault()\r\n\r\n    const { dispatch, selectedSubreddit } = this.props\r\n    dispatch(invalidateSubreddit(selectedSubreddit))\r\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n  }\r\n\r\n  render() {\r\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n      <div>\r\n        <Picker\r\n          value={selectedSubreddit}\r\n          onChange={this.handleChange}\r\n          options={['reactjs', 'frontend']}\r\n        />\r\n        <p>\r\n          {lastUpdated && (\r\n            <span>\r\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\r\n            </span>\r\n          )}\r\n          {!isFetching && (\r\n            <button onClick={this.handleRefreshClick}>Refresh</button>\r\n          )}\r\n        </p>\r\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\r\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\r\n        {posts.length > 0 && (\r\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\r\n            <Posts posts={posts} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAsyncApp.propTypes = {\r\n  selectedSubreddit: PropTypes.string.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  isFetching: PropTypes.bool.isRequired,\r\n  lastUpdated: PropTypes.number,\r\n  dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { selectedSubreddit, postsBySubreddit } = state\r\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\r\n    selectedSubreddit\r\n  ] || {\r\n    isFetching: true,\r\n    items: []\r\n  }\r\n\r\n  return {\r\n    selectedSubreddit,\r\n    posts,\r\n    isFetching,\r\n    lastUpdated\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AsyncApp)\r\n"],"sourceRoot":""}