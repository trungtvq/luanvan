{"version":3,"sources":["actions/index.js","contexts/authContext.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","REQUEST_POSTS","RECEIVE_POSTS","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","selectSubreddit","invalidateSubreddit","fetchPostsIfNeeded","subreddit","type","fetchPosts","dispatch","requestPosts","fetch","concat","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","react__WEBPACK_IMPORTED_MODULE_0__","authContext","n","React","createContext","token","signInEmail","login","logout","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","defineProperty","items","lastUpdated","selectedSubreddit","loading","react_default","a","createElement","className","client","ApolloClient","uri","DefaultLayout","Loadable","loader","Promise","all","e","bind","Login","Register","Page404","Page500","PagePay","AsyncApp","HomeMain","HomeContact","HomeService","HomeSolve","HomePayment","Demo","ProfileDetail","ProfileEdit","loggerMiddleware","createLogger","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","App","_this","setState","react_redux_es","react_apollo_esm","Provider","value","this","BrowserRouter","Switch","Route","exact","path","name","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecc583a6.chunk.js","sourcesContent":["//import fetch from 'cross-fetch'\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit\n  }\n}\n\nexport function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n  }\n}\n\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  }\n}\n\nfunction receivePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  }\n}\n\nfunction fetchPosts(subreddit) {\n  return dispatch => {\n    dispatch(requestPosts(subreddit))\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(subreddit, json)))\n  }\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didInvalidate\n  }\n}\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit))\n    }\n  }\n}","import React from \"react\";\nconst authContext = React.createContext({\n\ttoken:null,\n\tsignInEmail: null,\n\tlogin: (token,signInEmail)=>{},\n\tlogout: ()=>{}\n});\nexport default authContext;\n","import { combineReducers } from 'redux'\nimport {\n  SELECT_SUBREDDIT,\n  INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from '../actions'\n\nfunction selectedSubreddit(state = 'reactjs', action) {\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit\n    default:\n      return state\n  }\n}\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      })\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}\n\nfunction postsBySubreddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        [action.subreddit]: posts(state[action.subreddit], action)\n      })\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  postsBySubreddit,\n  selectedSubreddit\n})\n\nexport default rootReducer","//style \nimport './App.scss';\n\nimport React, { Component } from 'react';\n\n//context\nimport authContext from \"./contexts/authContext\";///////\n\n\n//Appolo\nimport ApolloClient from 'apollo-boost';\nimport {AppoloProvider, ApolloProvider} from 'react-apollo';\n\n\n\nimport { HashRouter, BrowserRouter,Route, Switch } from 'react-router-dom';\n\n\n\nimport PropTypes from 'prop-types'\n\n//redux\nimport { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\nimport { Provider } from 'react-redux'\n\n//loading async with text \"Loading\"\nimport Loadable from 'react-loadable';\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\n\n//apollo client setup\nconst client = new ApolloClient({\n  uri:'https://overlead.co/api/graphql'\n})\n\n\n// Containers layout\nconst DefaultLayout = Loadable({\n  loader: () => import('./containers/DefaultLayout'),\n  loading\n});\n\n// Pages no layout\nconst Login = Loadable({\n  loader: () => import('./views/Pages/Login'),\n  loading\n});\n\nconst Register = Loadable({\n  loader: () => import('./views/Pages/Register'),\n  loading\n});\n\nconst Page404 = Loadable({\n  loader: () => import('./views/Pages/Page404'),\n  loading\n});\n\nconst Page500 = Loadable({\n  loader: () => import('./views/Pages/Page500'),\n  loading\n});\nconst PagePay = Loadable({\n  loader: () => import('./views/Pages/PagePay'),\n  loading\n});\n\nconst AsyncApp= Loadable({\n  loader: ()=> import('./components/AsyncApp'),\n  loading\n})\n\n\n\n//Home\nconst HomeMain = Loadable({\n  loader: () => import('./views/General/Home/Main'),\n  loading\n});\nconst HomeContact = Loadable({\n  loader: () => import('./views/General/Home/Contact'),\n  loading\n});\nconst HomeService = Loadable({\n  loader: () => import('./views/General/Home/Service'),\n  loading\n});\nconst HomeSolve = Loadable({\n  loader: () => import('./views/General/Home/Solve'),\n  loading\n});\nconst HomePayment = Loadable({\n  loader: () => import('./views/General/Home/Payment'),\n  loading\n});\n//\nconst Demo = Loadable({\n  loader: () => import('./homeNav'),\n  loading\n});\n\n// //PJ\n// const AllProject = Loadable({\n//   loader: () => import('./views/Personal/Project/AllProject'),\n//   loading\n// });\n// const ProjectDone = Loadable({\n//   loader: () => import('./views/Personal/Project/ProjectDone'),\n//   loading\n// });\n// const ProjectTodo = Loadable({\n//   loader: () => import('./views/Personal/Project/ProjectTodo'),\n//   loading\n// });\n// //\n\n\n//profile\nconst ProfileDetail = Loadable({\n  loader: () => import('./views/Personal/Profile/detail'),\n  loading\n});\nconst ProfileEdit = Loadable({\n  loader: () => import('./views/Personal/Profile/edit'),\n  loading\n});\n//\nconst loggerMiddleware = createLogger()\n\nfunction configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  )\n}\n\nconst store = configureStore()\n // <Route exact path=\"/AllProject\" name=\"AllProject\" component={AllProject} />\n                      // <Route exact path=\"/ProjectDone\" name=\"ProjectDone\" component={ProjectDone} />\n                      // <Route exact path=\"/ProjectTodo\" name=\"ProjectTodo\" component={ProjectTodo} />\n\n//{ path: '/Home/Main', exact: true, name: 'HomeMain', component: HomeMain },\n  // { path: '/Home/Contact', exact: true, name: 'HomeContact', component: HomeContact },\n  // { path: '/Home/Service', exact: true, name: 'HomeService', component: HomeService },\n  // { path: '/Home/Solve', exact: true, name: 'HomeSolve', component: HomeSolve},\n\nclass App extends Component {\n  state={\n    token:null,\n    signInEmail:null\n  }\n\n  login = (token,signInEmail)=>{\n    this.setState({ token : token , signInEmail : signInEmail });\n  }\n  logout = ()=>{\n    this.setState({ token : null , signInEmail : null });\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <ApolloProvider client={client}>\n          <authContext.Provider \n            value={{\n                      token:this.state.token,\n                      signInEmail:this.state.signInEmail,\n                      login:this.login,\n                      logout:this.logout\n                  }}>  \n            <BrowserRouter>\n                <Switch>\n                <Route exact path=\"/homeNav\" name=\"HomeNav\" component={Demo} />\n                      <Route exact path=\"/Home/Main\" name=\"HomeMain\" component={HomeMain} />\n                      <Route exact path=\"/Home/Contact\" name=\"HomeContact\" component={HomeContact} />\n                      <Route exact path=\"/Home/Service\" name=\"HomeService\" component={HomeService} />\n                      <Route exact path=\"/Home/Solve\" name=\"HomeSolve\" component={HomeSolve} />\n                      <Route exact path=\"/Home/Payment\" name=\"HomePayment\" component={HomePayment} />\n\n\n                     \n                      <Route exact path=\"/Profile/Detail\" name=\"ProfileDetail\" component={ProfileDetail} />\n                      <Route exact path=\"/Profile/Edit\" name=\"ProjectTodo\" component={ProfileEdit} />\n    \n\n\n                      <Route exact path=\"/login\" name=\"Login Page\" component={Login} />\n                      <Route exact path=\"/register\" name=\"Register Page\" component={Register} />\n                      <Route exact path=\"/404\" name=\"Page 404\" component={Page404} />\n                      <Route exact path=\"/500\" name=\"Page 500\" component={Page500} />\n                      <Route exact path=\"/pay\" name=\"Page Pay\" component={PagePay} />\n                      <Route exact path=\"/async\" name=\"page test\" component={AsyncApp} />\n                      <Route path=\"/\" name=\"Home\" component={DefaultLayout} />\n                </Switch>\n            </BrowserRouter>\n          </authContext.Provider>  \n          </ApolloProvider>\n    </Provider>   \n)}}\n\nApp.propTypes = {\n  store: PropTypes.object.isRequired\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}