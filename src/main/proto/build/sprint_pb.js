/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sprint.AddNewSprintReq', null, global);
goog.exportSymbol('proto.sprint.DeleteSprintReq', null, global);
goog.exportSymbol('proto.sprint.GetAllSprintReq', null, global);
goog.exportSymbol('proto.sprint.GetAllSprintRes', null, global);
goog.exportSymbol('proto.sprint.SprintRes', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprint.DeleteSprintReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprint.DeleteSprintReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprint.DeleteSprintReq.displayName = 'proto.sprint.DeleteSprintReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprint.DeleteSprintReq.prototype.toObject = function(opt_includeInstance) {
  return proto.sprint.DeleteSprintReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprint.DeleteSprintReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprint.DeleteSprintReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    sprintid: msg.getSprintid(),
    accesstoken: msg.getAccesstoken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprint.DeleteSprintReq}
 */
proto.sprint.DeleteSprintReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprint.DeleteSprintReq;
  return proto.sprint.DeleteSprintReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprint.DeleteSprintReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprint.DeleteSprintReq}
 */
proto.sprint.DeleteSprintReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprint.DeleteSprintReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.DeleteSprintReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprint.DeleteSprintReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.DeleteSprintReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSprintid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprint.DeleteSprintReq} The clone.
 */
proto.sprint.DeleteSprintReq.prototype.cloneMessage = function() {
  return /** @type {!proto.sprint.DeleteSprintReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.sprint.DeleteSprintReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprint.DeleteSprintReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.sprint.DeleteSprintReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.sprint.DeleteSprintReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string sprintId = 3;
 * @return {string}
 */
proto.sprint.DeleteSprintReq.prototype.getSprintid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.sprint.DeleteSprintReq.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.sprint.DeleteSprintReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.sprint.DeleteSprintReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprint.AddNewSprintReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprint.AddNewSprintReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprint.AddNewSprintReq.displayName = 'proto.sprint.AddNewSprintReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprint.AddNewSprintReq.prototype.toObject = function(opt_includeInstance) {
  return proto.sprint.AddNewSprintReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprint.AddNewSprintReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprint.AddNewSprintReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    accesstoken: msg.getAccesstoken(),
    title: msg.getTitle(),
    num: msg.getNum(),
    goal: msg.getGoal(),
    start: msg.getStart(),
    end: msg.getEnd()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprint.AddNewSprintReq}
 */
proto.sprint.AddNewSprintReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprint.AddNewSprintReq;
  return proto.sprint.AddNewSprintReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprint.AddNewSprintReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprint.AddNewSprintReq}
 */
proto.sprint.AddNewSprintReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoal(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprint.AddNewSprintReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.AddNewSprintReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprint.AddNewSprintReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.AddNewSprintReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getNum();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getGoal();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getStart();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getEnd();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprint.AddNewSprintReq} The clone.
 */
proto.sprint.AddNewSprintReq.prototype.cloneMessage = function() {
  return /** @type {!proto.sprint.AddNewSprintReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.sprint.AddNewSprintReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprint.AddNewSprintReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.sprint.AddNewSprintReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.sprint.AddNewSprintReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.sprint.AddNewSprintReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.sprint.AddNewSprintReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.sprint.AddNewSprintReq.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.sprint.AddNewSprintReq.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string num = 6;
 * @return {string}
 */
proto.sprint.AddNewSprintReq.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.sprint.AddNewSprintReq.prototype.setNum = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string goal = 7;
 * @return {string}
 */
proto.sprint.AddNewSprintReq.prototype.getGoal = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.sprint.AddNewSprintReq.prototype.setGoal = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string start = 8;
 * @return {string}
 */
proto.sprint.AddNewSprintReq.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.sprint.AddNewSprintReq.prototype.setStart = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string end = 9;
 * @return {string}
 */
proto.sprint.AddNewSprintReq.prototype.getEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.sprint.AddNewSprintReq.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprint.SprintRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprint.SprintRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprint.SprintRes.displayName = 'proto.sprint.SprintRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprint.SprintRes.prototype.toObject = function(opt_includeInstance) {
  return proto.sprint.SprintRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprint.SprintRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprint.SprintRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus(),
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprint.SprintRes}
 */
proto.sprint.SprintRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprint.SprintRes;
  return proto.sprint.SprintRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprint.SprintRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprint.SprintRes}
 */
proto.sprint.SprintRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprint.SprintRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.SprintRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprint.SprintRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.SprintRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprint.SprintRes} The clone.
 */
proto.sprint.SprintRes.prototype.cloneMessage = function() {
  return /** @type {!proto.sprint.SprintRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.sprint.SprintRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprint.SprintRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.sprint.SprintRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.sprint.SprintRes.prototype.setId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprint.GetAllSprintReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprint.GetAllSprintReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprint.GetAllSprintReq.displayName = 'proto.sprint.GetAllSprintReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprint.GetAllSprintReq.prototype.toObject = function(opt_includeInstance) {
  return proto.sprint.GetAllSprintReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprint.GetAllSprintReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprint.GetAllSprintReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    accesstoken: msg.getAccesstoken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprint.GetAllSprintReq}
 */
proto.sprint.GetAllSprintReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprint.GetAllSprintReq;
  return proto.sprint.GetAllSprintReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprint.GetAllSprintReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprint.GetAllSprintReq}
 */
proto.sprint.GetAllSprintReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprint.GetAllSprintReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.GetAllSprintReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprint.GetAllSprintReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.GetAllSprintReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprint.GetAllSprintReq} The clone.
 */
proto.sprint.GetAllSprintReq.prototype.cloneMessage = function() {
  return /** @type {!proto.sprint.GetAllSprintReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.sprint.GetAllSprintReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.sprint.GetAllSprintReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.sprint.GetAllSprintReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprint.GetAllSprintRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprint.GetAllSprintRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprint.GetAllSprintRes.displayName = 'proto.sprint.GetAllSprintRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprint.GetAllSprintRes.prototype.toObject = function(opt_includeInstance) {
  return proto.sprint.GetAllSprintRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprint.GetAllSprintRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprint.GetAllSprintRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    statussprint: msg.getStatussprint(),
    title: msg.getTitle(),
    num: msg.getNum(),
    goal: msg.getGoal(),
    start: msg.getStart(),
    end: msg.getEnd(),
    status: msg.getStatus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprint.GetAllSprintRes}
 */
proto.sprint.GetAllSprintRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprint.GetAllSprintRes;
  return proto.sprint.GetAllSprintRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprint.GetAllSprintRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprint.GetAllSprintRes}
 */
proto.sprint.GetAllSprintRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatussprint(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoal(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnd(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprint.GetAllSprintRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.GetAllSprintRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprint.GetAllSprintRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprint.GetAllSprintRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getStatussprint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getNum();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getGoal();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getStart();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getEnd();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprint.GetAllSprintRes} The clone.
 */
proto.sprint.GetAllSprintRes.prototype.cloneMessage = function() {
  return /** @type {!proto.sprint.GetAllSprintRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.sprint.GetAllSprintRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintRes.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string statusSprint = 4;
 * @return {string}
 */
proto.sprint.GetAllSprintRes.prototype.getStatussprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintRes.prototype.setStatussprint = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.sprint.GetAllSprintRes.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintRes.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string num = 6;
 * @return {string}
 */
proto.sprint.GetAllSprintRes.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintRes.prototype.setNum = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string goal = 7;
 * @return {string}
 */
proto.sprint.GetAllSprintRes.prototype.getGoal = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintRes.prototype.setGoal = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string start = 8;
 * @return {string}
 */
proto.sprint.GetAllSprintRes.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintRes.prototype.setStart = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string end = 9;
 * @return {string}
 */
proto.sprint.GetAllSprintRes.prototype.getEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintRes.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.sprint.GetAllSprintRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprint.GetAllSprintRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.sprint);
