/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.mytask.CommentMyTaskReq', null, global);
goog.exportSymbol('proto.mytask.GetAllMyTaskReq', null, global);
goog.exportSymbol('proto.mytask.GetAllMyTaskRes', null, global);
goog.exportSymbol('proto.mytask.MyTaskReq', null, global);
goog.exportSymbol('proto.mytask.MyTaskRes', null, global);
goog.exportSymbol('proto.mytask.UpdateMyTaskReq', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mytask.MyTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mytask.MyTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mytask.MyTaskReq.displayName = 'proto.mytask.MyTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mytask.MyTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.mytask.MyTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mytask.MyTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.mytask.MyTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    teamid: msg.getTeamid(),
    accesstoken: msg.getAccesstoken(),
    taskid: msg.getTaskid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mytask.MyTaskReq}
 */
proto.mytask.MyTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mytask.MyTaskReq;
  return proto.mytask.MyTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mytask.MyTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mytask.MyTaskReq}
 */
proto.mytask.MyTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.mytask.MyTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.MyTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mytask.MyTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.MyTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTaskid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.mytask.MyTaskReq} The clone.
 */
proto.mytask.MyTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.mytask.MyTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.mytask.MyTaskReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.mytask.MyTaskReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.mytask.MyTaskReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.mytask.MyTaskReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string teamId = 4;
 * @return {string}
 */
proto.mytask.MyTaskReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.mytask.MyTaskReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.mytask.MyTaskReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.mytask.MyTaskReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string taskId = 5;
 * @return {string}
 */
proto.mytask.MyTaskReq.prototype.getTaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.mytask.MyTaskReq.prototype.setTaskid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mytask.CommentMyTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mytask.CommentMyTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mytask.CommentMyTaskReq.displayName = 'proto.mytask.CommentMyTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mytask.CommentMyTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.mytask.CommentMyTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mytask.CommentMyTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.mytask.CommentMyTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    mytask: (f = msg.getMytask()) && proto.mytask.MyTaskReq.toObject(includeInstance, f),
    comment: msg.getComment()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mytask.CommentMyTaskReq}
 */
proto.mytask.CommentMyTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mytask.CommentMyTaskReq;
  return proto.mytask.CommentMyTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mytask.CommentMyTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mytask.CommentMyTaskReq}
 */
proto.mytask.CommentMyTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mytask.MyTaskReq;
      reader.readMessage(value,proto.mytask.MyTaskReq.deserializeBinaryFromReader);
      msg.setMytask(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.mytask.CommentMyTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.CommentMyTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mytask.CommentMyTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.CommentMyTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMytask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mytask.MyTaskReq.serializeBinaryToWriter
    );
  }
  f = this.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.mytask.CommentMyTaskReq} The clone.
 */
proto.mytask.CommentMyTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.mytask.CommentMyTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MyTaskReq mytask = 1;
 * @return {proto.mytask.MyTaskReq}
 */
proto.mytask.CommentMyTaskReq.prototype.getMytask = function() {
  return /** @type{proto.mytask.MyTaskReq} */ (
    jspb.Message.getWrapperField(this, proto.mytask.MyTaskReq, 1));
};


/** @param {proto.mytask.MyTaskReq|undefined} value  */
proto.mytask.CommentMyTaskReq.prototype.setMytask = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.mytask.CommentMyTaskReq.prototype.clearMytask = function() {
  this.setMytask(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.mytask.CommentMyTaskReq.prototype.hasMytask = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.mytask.CommentMyTaskReq.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.mytask.CommentMyTaskReq.prototype.setComment = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mytask.UpdateMyTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mytask.UpdateMyTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mytask.UpdateMyTaskReq.displayName = 'proto.mytask.UpdateMyTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mytask.UpdateMyTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.mytask.UpdateMyTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mytask.UpdateMyTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.mytask.UpdateMyTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    teamid: msg.getTeamid(),
    accesstoken: msg.getAccesstoken(),
    statustask: msg.getStatustask()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mytask.UpdateMyTaskReq}
 */
proto.mytask.UpdateMyTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mytask.UpdateMyTaskReq;
  return proto.mytask.UpdateMyTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mytask.UpdateMyTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mytask.UpdateMyTaskReq}
 */
proto.mytask.UpdateMyTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatustask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.mytask.UpdateMyTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.UpdateMyTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mytask.UpdateMyTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.UpdateMyTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getStatustask();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.mytask.UpdateMyTaskReq} The clone.
 */
proto.mytask.UpdateMyTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.mytask.UpdateMyTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.mytask.UpdateMyTaskReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.mytask.UpdateMyTaskReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.mytask.UpdateMyTaskReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.mytask.UpdateMyTaskReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string teamId = 4;
 * @return {string}
 */
proto.mytask.UpdateMyTaskReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.mytask.UpdateMyTaskReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.mytask.UpdateMyTaskReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.mytask.UpdateMyTaskReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string statusTask = 5;
 * @return {string}
 */
proto.mytask.UpdateMyTaskReq.prototype.getStatustask = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.mytask.UpdateMyTaskReq.prototype.setStatustask = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mytask.MyTaskRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mytask.MyTaskRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mytask.MyTaskRes.displayName = 'proto.mytask.MyTaskRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mytask.MyTaskRes.prototype.toObject = function(opt_includeInstance) {
  return proto.mytask.MyTaskRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mytask.MyTaskRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.mytask.MyTaskRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mytask.MyTaskRes}
 */
proto.mytask.MyTaskRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mytask.MyTaskRes;
  return proto.mytask.MyTaskRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mytask.MyTaskRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mytask.MyTaskRes}
 */
proto.mytask.MyTaskRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.mytask.MyTaskRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.MyTaskRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mytask.MyTaskRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.MyTaskRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.mytask.MyTaskRes} The clone.
 */
proto.mytask.MyTaskRes.prototype.cloneMessage = function() {
  return /** @type {!proto.mytask.MyTaskRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.mytask.MyTaskRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.mytask.MyTaskRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mytask.GetAllMyTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mytask.GetAllMyTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mytask.GetAllMyTaskReq.displayName = 'proto.mytask.GetAllMyTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mytask.GetAllMyTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.mytask.GetAllMyTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mytask.GetAllMyTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.mytask.GetAllMyTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    teamid: msg.getTeamid(),
    accesstoken: msg.getAccesstoken(),
    username: msg.getUsername()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mytask.GetAllMyTaskReq}
 */
proto.mytask.GetAllMyTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mytask.GetAllMyTaskReq;
  return proto.mytask.GetAllMyTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mytask.GetAllMyTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mytask.GetAllMyTaskReq}
 */
proto.mytask.GetAllMyTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.mytask.GetAllMyTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.GetAllMyTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mytask.GetAllMyTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.GetAllMyTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.mytask.GetAllMyTaskReq} The clone.
 */
proto.mytask.GetAllMyTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.mytask.GetAllMyTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.mytask.GetAllMyTaskReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.mytask.GetAllMyTaskReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string teamId = 4;
 * @return {string}
 */
proto.mytask.GetAllMyTaskReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.mytask.GetAllMyTaskReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string username = 5;
 * @return {string}
 */
proto.mytask.GetAllMyTaskReq.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskReq.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mytask.GetAllMyTaskRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mytask.GetAllMyTaskRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mytask.GetAllMyTaskRes.displayName = 'proto.mytask.GetAllMyTaskRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mytask.GetAllMyTaskRes.prototype.toObject = function(opt_includeInstance) {
  return proto.mytask.GetAllMyTaskRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mytask.GetAllMyTaskRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.mytask.GetAllMyTaskRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamtaskid: msg.getTeamtaskid(),
    title: msg.getTitle(),
    description: msg.getDescription(),
    priority: msg.getPriority(),
    start: msg.getStart(),
    deadline: msg.getDeadline(),
    comment: msg.getComment(),
    status: msg.getStatus(),
    review: msg.getReview(),
    point: msg.getPoint(),
    statustask: msg.getStatustask()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mytask.GetAllMyTaskRes}
 */
proto.mytask.GetAllMyTaskRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mytask.GetAllMyTaskRes;
  return proto.mytask.GetAllMyTaskRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mytask.GetAllMyTaskRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mytask.GetAllMyTaskRes}
 */
proto.mytask.GetAllMyTaskRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamtaskid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadline(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReview(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoint(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatustask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.mytask.GetAllMyTaskRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.GetAllMyTaskRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mytask.GetAllMyTaskRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.mytask.GetAllMyTaskRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTeamtaskid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPriority();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getStart();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getDeadline();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getComment();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getReview();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getPoint();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getStatustask();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.mytask.GetAllMyTaskRes} The clone.
 */
proto.mytask.GetAllMyTaskRes.prototype.cloneMessage = function() {
  return /** @type {!proto.mytask.GetAllMyTaskRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string teamTaskId = 9;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getTeamtaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setTeamtaskid = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string priority = 3;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setPriority = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string start = 4;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setStart = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string deadline = 5;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getDeadline = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setDeadline = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string comment = 6;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setComment = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string status = 7;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string review = 10;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getReview = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setReview = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string point = 11;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setPoint = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string statusTask = 8;
 * @return {string}
 */
proto.mytask.GetAllMyTaskRes.prototype.getStatustask = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.mytask.GetAllMyTaskRes.prototype.setStatustask = function(value) {
  jspb.Message.setField(this, 8, value);
};


goog.object.extend(exports, proto.mytask);
