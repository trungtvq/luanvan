/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.userstory.AddNewUserStoryReq', null, global);
goog.exportSymbol('proto.userstory.DeleteUserStoryReq', null, global);
goog.exportSymbol('proto.userstory.GetAllUserStoryReq', null, global);
goog.exportSymbol('proto.userstory.GetAllUserStoryRes', null, global);
goog.exportSymbol('proto.userstory.SendToProductBacklogReq', null, global);
goog.exportSymbol('proto.userstory.UpdateUserStoryReq', null, global);
goog.exportSymbol('proto.userstory.UserStoryRes', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userstory.SendToProductBacklogReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userstory.SendToProductBacklogReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.userstory.SendToProductBacklogReq.displayName = 'proto.userstory.SendToProductBacklogReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userstory.SendToProductBacklogReq.prototype.toObject = function(opt_includeInstance) {
  return proto.userstory.SendToProductBacklogReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userstory.SendToProductBacklogReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.userstory.SendToProductBacklogReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    id: msg.getId(),
    priority: msg.getPriority(),
    estimation: msg.getEstimation(),
    statusbacklog: msg.getStatusbacklog(),
    accesstoken: msg.getAccesstoken(),
    sprint: msg.getSprint()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userstory.SendToProductBacklogReq}
 */
proto.userstory.SendToProductBacklogReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userstory.SendToProductBacklogReq;
  return proto.userstory.SendToProductBacklogReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userstory.SendToProductBacklogReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userstory.SendToProductBacklogReq}
 */
proto.userstory.SendToProductBacklogReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEstimation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusbacklog(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.userstory.SendToProductBacklogReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.SendToProductBacklogReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userstory.SendToProductBacklogReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.SendToProductBacklogReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPriority();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getEstimation();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getStatusbacklog();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getSprint();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.userstory.SendToProductBacklogReq} The clone.
 */
proto.userstory.SendToProductBacklogReq.prototype.cloneMessage = function() {
  return /** @type {!proto.userstory.SendToProductBacklogReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.userstory.SendToProductBacklogReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.userstory.SendToProductBacklogReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.userstory.SendToProductBacklogReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.userstory.SendToProductBacklogReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.userstory.SendToProductBacklogReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.userstory.SendToProductBacklogReq.prototype.setId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string priority = 4;
 * @return {string}
 */
proto.userstory.SendToProductBacklogReq.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.userstory.SendToProductBacklogReq.prototype.setPriority = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string estimation = 5;
 * @return {string}
 */
proto.userstory.SendToProductBacklogReq.prototype.getEstimation = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.userstory.SendToProductBacklogReq.prototype.setEstimation = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string statusBacklog = 6;
 * @return {string}
 */
proto.userstory.SendToProductBacklogReq.prototype.getStatusbacklog = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.userstory.SendToProductBacklogReq.prototype.setStatusbacklog = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string accessToken = 7;
 * @return {string}
 */
proto.userstory.SendToProductBacklogReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.userstory.SendToProductBacklogReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string sprint = 8;
 * @return {string}
 */
proto.userstory.SendToProductBacklogReq.prototype.getSprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.userstory.SendToProductBacklogReq.prototype.setSprint = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userstory.AddNewUserStoryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userstory.AddNewUserStoryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.userstory.AddNewUserStoryReq.displayName = 'proto.userstory.AddNewUserStoryReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userstory.AddNewUserStoryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.userstory.AddNewUserStoryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userstory.AddNewUserStoryReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.userstory.AddNewUserStoryReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    role: msg.getRole(),
    want: msg.getWant(),
    so: msg.getSo(),
    accesstoken: msg.getAccesstoken(),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userstory.AddNewUserStoryReq}
 */
proto.userstory.AddNewUserStoryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userstory.AddNewUserStoryReq;
  return proto.userstory.AddNewUserStoryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userstory.AddNewUserStoryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userstory.AddNewUserStoryReq}
 */
proto.userstory.AddNewUserStoryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWant(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.userstory.AddNewUserStoryReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.AddNewUserStoryReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userstory.AddNewUserStoryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.AddNewUserStoryReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getWant();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.userstory.AddNewUserStoryReq} The clone.
 */
proto.userstory.AddNewUserStoryReq.prototype.cloneMessage = function() {
  return /** @type {!proto.userstory.AddNewUserStoryReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.userstory.AddNewUserStoryReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.userstory.AddNewUserStoryReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.userstory.AddNewUserStoryReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.userstory.AddNewUserStoryReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string role = 3;
 * @return {string}
 */
proto.userstory.AddNewUserStoryReq.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.userstory.AddNewUserStoryReq.prototype.setRole = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string want = 4;
 * @return {string}
 */
proto.userstory.AddNewUserStoryReq.prototype.getWant = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.userstory.AddNewUserStoryReq.prototype.setWant = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string so = 5;
 * @return {string}
 */
proto.userstory.AddNewUserStoryReq.prototype.getSo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.userstory.AddNewUserStoryReq.prototype.setSo = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string accessToken = 6;
 * @return {string}
 */
proto.userstory.AddNewUserStoryReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.userstory.AddNewUserStoryReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.userstory.AddNewUserStoryReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.userstory.AddNewUserStoryReq.prototype.setName = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userstory.UserStoryRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userstory.UserStoryRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.userstory.UserStoryRes.displayName = 'proto.userstory.UserStoryRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userstory.UserStoryRes.prototype.toObject = function(opt_includeInstance) {
  return proto.userstory.UserStoryRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userstory.UserStoryRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.userstory.UserStoryRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus(),
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userstory.UserStoryRes}
 */
proto.userstory.UserStoryRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userstory.UserStoryRes;
  return proto.userstory.UserStoryRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userstory.UserStoryRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userstory.UserStoryRes}
 */
proto.userstory.UserStoryRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.userstory.UserStoryRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.UserStoryRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userstory.UserStoryRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.UserStoryRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.userstory.UserStoryRes} The clone.
 */
proto.userstory.UserStoryRes.prototype.cloneMessage = function() {
  return /** @type {!proto.userstory.UserStoryRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.userstory.UserStoryRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.userstory.UserStoryRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.userstory.UserStoryRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.userstory.UserStoryRes.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userstory.UpdateUserStoryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userstory.UpdateUserStoryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.userstory.UpdateUserStoryReq.displayName = 'proto.userstory.UpdateUserStoryReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userstory.UpdateUserStoryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.userstory.UpdateUserStoryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userstory.UpdateUserStoryReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.userstory.UpdateUserStoryReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    userstoryid: msg.getUserstoryid(),
    role: msg.getRole(),
    want: msg.getWant(),
    so: msg.getSo(),
    accesstoken: msg.getAccesstoken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userstory.UpdateUserStoryReq}
 */
proto.userstory.UpdateUserStoryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userstory.UpdateUserStoryReq;
  return proto.userstory.UpdateUserStoryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userstory.UpdateUserStoryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userstory.UpdateUserStoryReq}
 */
proto.userstory.UpdateUserStoryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserstoryid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWant(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.userstory.UpdateUserStoryReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.UpdateUserStoryReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userstory.UpdateUserStoryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.UpdateUserStoryReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getUserstoryid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getWant();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getSo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.userstory.UpdateUserStoryReq} The clone.
 */
proto.userstory.UpdateUserStoryReq.prototype.cloneMessage = function() {
  return /** @type {!proto.userstory.UpdateUserStoryReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.userstory.UpdateUserStoryReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.userstory.UpdateUserStoryReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.userstory.UpdateUserStoryReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.userstory.UpdateUserStoryReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string userStoryId = 3;
 * @return {string}
 */
proto.userstory.UpdateUserStoryReq.prototype.getUserstoryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.userstory.UpdateUserStoryReq.prototype.setUserstoryid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string role = 4;
 * @return {string}
 */
proto.userstory.UpdateUserStoryReq.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.userstory.UpdateUserStoryReq.prototype.setRole = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string want = 5;
 * @return {string}
 */
proto.userstory.UpdateUserStoryReq.prototype.getWant = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.userstory.UpdateUserStoryReq.prototype.setWant = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string so = 6;
 * @return {string}
 */
proto.userstory.UpdateUserStoryReq.prototype.getSo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.userstory.UpdateUserStoryReq.prototype.setSo = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string accessToken = 7;
 * @return {string}
 */
proto.userstory.UpdateUserStoryReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.userstory.UpdateUserStoryReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userstory.DeleteUserStoryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userstory.DeleteUserStoryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.userstory.DeleteUserStoryReq.displayName = 'proto.userstory.DeleteUserStoryReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userstory.DeleteUserStoryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.userstory.DeleteUserStoryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userstory.DeleteUserStoryReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.userstory.DeleteUserStoryReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    userstoryid: msg.getUserstoryid(),
    accesstoken: msg.getAccesstoken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userstory.DeleteUserStoryReq}
 */
proto.userstory.DeleteUserStoryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userstory.DeleteUserStoryReq;
  return proto.userstory.DeleteUserStoryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userstory.DeleteUserStoryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userstory.DeleteUserStoryReq}
 */
proto.userstory.DeleteUserStoryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserstoryid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.userstory.DeleteUserStoryReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.DeleteUserStoryReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userstory.DeleteUserStoryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.DeleteUserStoryReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getUserstoryid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.userstory.DeleteUserStoryReq} The clone.
 */
proto.userstory.DeleteUserStoryReq.prototype.cloneMessage = function() {
  return /** @type {!proto.userstory.DeleteUserStoryReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.userstory.DeleteUserStoryReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.userstory.DeleteUserStoryReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.userstory.DeleteUserStoryReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.userstory.DeleteUserStoryReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string userStoryId = 3;
 * @return {string}
 */
proto.userstory.DeleteUserStoryReq.prototype.getUserstoryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.userstory.DeleteUserStoryReq.prototype.setUserstoryid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.userstory.DeleteUserStoryReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.userstory.DeleteUserStoryReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userstory.GetAllUserStoryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userstory.GetAllUserStoryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.userstory.GetAllUserStoryReq.displayName = 'proto.userstory.GetAllUserStoryReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userstory.GetAllUserStoryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.userstory.GetAllUserStoryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userstory.GetAllUserStoryReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.userstory.GetAllUserStoryReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    accesstoken: msg.getAccesstoken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userstory.GetAllUserStoryReq}
 */
proto.userstory.GetAllUserStoryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userstory.GetAllUserStoryReq;
  return proto.userstory.GetAllUserStoryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userstory.GetAllUserStoryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userstory.GetAllUserStoryReq}
 */
proto.userstory.GetAllUserStoryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.userstory.GetAllUserStoryReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.GetAllUserStoryReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userstory.GetAllUserStoryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.GetAllUserStoryReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.userstory.GetAllUserStoryReq} The clone.
 */
proto.userstory.GetAllUserStoryReq.prototype.cloneMessage = function() {
  return /** @type {!proto.userstory.GetAllUserStoryReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.userstory.GetAllUserStoryReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.userstory.GetAllUserStoryReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.userstory.GetAllUserStoryReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.userstory.GetAllUserStoryRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.userstory.GetAllUserStoryRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.userstory.GetAllUserStoryRes.displayName = 'proto.userstory.GetAllUserStoryRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.userstory.GetAllUserStoryRes.prototype.toObject = function(opt_includeInstance) {
  return proto.userstory.GetAllUserStoryRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.userstory.GetAllUserStoryRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.userstory.GetAllUserStoryRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: msg.getRole(),
    want: msg.getWant(),
    so: msg.getSo(),
    status: msg.getStatus(),
    id: msg.getId(),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.userstory.GetAllUserStoryRes}
 */
proto.userstory.GetAllUserStoryRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.userstory.GetAllUserStoryRes;
  return proto.userstory.GetAllUserStoryRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.userstory.GetAllUserStoryRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.userstory.GetAllUserStoryRes}
 */
proto.userstory.GetAllUserStoryRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWant(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.userstory.GetAllUserStoryRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.GetAllUserStoryRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.userstory.GetAllUserStoryRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.userstory.GetAllUserStoryRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getWant();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.userstory.GetAllUserStoryRes} The clone.
 */
proto.userstory.GetAllUserStoryRes.prototype.cloneMessage = function() {
  return /** @type {!proto.userstory.GetAllUserStoryRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string role = 1;
 * @return {string}
 */
proto.userstory.GetAllUserStoryRes.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryRes.prototype.setRole = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string want = 2;
 * @return {string}
 */
proto.userstory.GetAllUserStoryRes.prototype.getWant = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryRes.prototype.setWant = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string so = 3;
 * @return {string}
 */
proto.userstory.GetAllUserStoryRes.prototype.getSo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryRes.prototype.setSo = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string status = 4;
 * @return {string}
 */
proto.userstory.GetAllUserStoryRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string id = 5;
 * @return {string}
 */
proto.userstory.GetAllUserStoryRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryRes.prototype.setId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.userstory.GetAllUserStoryRes.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.userstory.GetAllUserStoryRes.prototype.setName = function(value) {
  jspb.Message.setField(this, 6, value);
};


goog.object.extend(exports, proto.userstory);
