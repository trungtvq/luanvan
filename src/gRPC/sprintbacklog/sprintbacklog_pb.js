/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sprintbacklog.DeleteSprintBacklogReq', null, global);
goog.exportSymbol('proto.sprintbacklog.GetAllSprintBacklogReq', null, global);
goog.exportSymbol('proto.sprintbacklog.GetAllSprintBacklogRes', null, global);
goog.exportSymbol('proto.sprintbacklog.SprintBacklogRes', null, global);
goog.exportSymbol('proto.sprintbacklog.UpdateSprintReq', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprintbacklog.UpdateSprintReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprintbacklog.UpdateSprintReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprintbacklog.UpdateSprintReq.displayName = 'proto.sprintbacklog.UpdateSprintReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.toObject = function(opt_includeInstance) {
  return proto.sprintbacklog.UpdateSprintReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprintbacklog.UpdateSprintReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprintbacklog.UpdateSprintReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    backlogid: msg.getBacklogid(),
    accesstoken: msg.getAccesstoken(),
    sprintid: msg.getSprintid(),
    sprintname: msg.getSprintname(),
    teamid: msg.getTeamid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprintbacklog.UpdateSprintReq}
 */
proto.sprintbacklog.UpdateSprintReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprintbacklog.UpdateSprintReq;
  return proto.sprintbacklog.UpdateSprintReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprintbacklog.UpdateSprintReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprintbacklog.UpdateSprintReq}
 */
proto.sprintbacklog.UpdateSprintReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBacklogid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintname(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprintbacklog.UpdateSprintReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.UpdateSprintReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.UpdateSprintReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getBacklogid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSprintid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getSprintname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprintbacklog.UpdateSprintReq} The clone.
 */
proto.sprintbacklog.UpdateSprintReq.prototype.cloneMessage = function() {
  return /** @type {!proto.sprintbacklog.UpdateSprintReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprintbacklog.UpdateSprintReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.sprintbacklog.UpdateSprintReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string backlogId = 3;
 * @return {string}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.getBacklogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.sprintbacklog.UpdateSprintReq.prototype.setBacklogid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.sprintbacklog.UpdateSprintReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string sprintId = 5;
 * @return {string}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.getSprintid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.sprintbacklog.UpdateSprintReq.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string sprintName = 6;
 * @return {string}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.getSprintname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.sprintbacklog.UpdateSprintReq.prototype.setSprintname = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string teamId = 7;
 * @return {string}
 */
proto.sprintbacklog.UpdateSprintReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.sprintbacklog.UpdateSprintReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprintbacklog.DeleteSprintBacklogReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprintbacklog.DeleteSprintBacklogReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprintbacklog.DeleteSprintBacklogReq.displayName = 'proto.sprintbacklog.DeleteSprintBacklogReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.toObject = function(opt_includeInstance) {
  return proto.sprintbacklog.DeleteSprintBacklogReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprintbacklog.DeleteSprintBacklogReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    backlogid: msg.getBacklogid(),
    accesstoken: msg.getAccesstoken(),
    teamid: msg.getTeamid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprintbacklog.DeleteSprintBacklogReq}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprintbacklog.DeleteSprintBacklogReq;
  return proto.sprintbacklog.DeleteSprintBacklogReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprintbacklog.DeleteSprintBacklogReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprintbacklog.DeleteSprintBacklogReq}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBacklogid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprintbacklog.DeleteSprintBacklogReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.DeleteSprintBacklogReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getBacklogid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprintbacklog.DeleteSprintBacklogReq} The clone.
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.cloneMessage = function() {
  return /** @type {!proto.sprintbacklog.DeleteSprintBacklogReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string backlogId = 3;
 * @return {string}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.getBacklogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.setBacklogid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string teamId = 5;
 * @return {string}
 */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.sprintbacklog.DeleteSprintBacklogReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprintbacklog.SprintBacklogRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprintbacklog.SprintBacklogRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprintbacklog.SprintBacklogRes.displayName = 'proto.sprintbacklog.SprintBacklogRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprintbacklog.SprintBacklogRes.prototype.toObject = function(opt_includeInstance) {
  return proto.sprintbacklog.SprintBacklogRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprintbacklog.SprintBacklogRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprintbacklog.SprintBacklogRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus(),
    backlogid: msg.getBacklogid(),
    backlogname: msg.getBacklogname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprintbacklog.SprintBacklogRes}
 */
proto.sprintbacklog.SprintBacklogRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprintbacklog.SprintBacklogRes;
  return proto.sprintbacklog.SprintBacklogRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprintbacklog.SprintBacklogRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprintbacklog.SprintBacklogRes}
 */
proto.sprintbacklog.SprintBacklogRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBacklogid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBacklogname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprintbacklog.SprintBacklogRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.SprintBacklogRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprintbacklog.SprintBacklogRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.SprintBacklogRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBacklogid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getBacklogname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprintbacklog.SprintBacklogRes} The clone.
 */
proto.sprintbacklog.SprintBacklogRes.prototype.cloneMessage = function() {
  return /** @type {!proto.sprintbacklog.SprintBacklogRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.sprintbacklog.SprintBacklogRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprintbacklog.SprintBacklogRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string backlogId = 3;
 * @return {string}
 */
proto.sprintbacklog.SprintBacklogRes.prototype.getBacklogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.sprintbacklog.SprintBacklogRes.prototype.setBacklogid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string backlogName = 4;
 * @return {string}
 */
proto.sprintbacklog.SprintBacklogRes.prototype.getBacklogname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.sprintbacklog.SprintBacklogRes.prototype.setBacklogname = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprintbacklog.GetAllSprintBacklogReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprintbacklog.GetAllSprintBacklogReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprintbacklog.GetAllSprintBacklogReq.displayName = 'proto.sprintbacklog.GetAllSprintBacklogReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.toObject = function(opt_includeInstance) {
  return proto.sprintbacklog.GetAllSprintBacklogReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprintbacklog.GetAllSprintBacklogReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    accesstoken: msg.getAccesstoken(),
    teamid: msg.getTeamid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprintbacklog.GetAllSprintBacklogReq}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprintbacklog.GetAllSprintBacklogReq;
  return proto.sprintbacklog.GetAllSprintBacklogReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprintbacklog.GetAllSprintBacklogReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprintbacklog.GetAllSprintBacklogReq}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprintbacklog.GetAllSprintBacklogReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.GetAllSprintBacklogReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprintbacklog.GetAllSprintBacklogReq} The clone.
 */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.cloneMessage = function() {
  return /** @type {!proto.sprintbacklog.GetAllSprintBacklogReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string teamId = 4;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sprintbacklog.GetAllSprintBacklogRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sprintbacklog.GetAllSprintBacklogRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sprintbacklog.GetAllSprintBacklogRes.displayName = 'proto.sprintbacklog.GetAllSprintBacklogRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.toObject = function(opt_includeInstance) {
  return proto.sprintbacklog.GetAllSprintBacklogRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sprintbacklog.GetAllSprintBacklogRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: msg.getTitle(),
    backlogid: msg.getBacklogid(),
    role: msg.getRole(),
    want: msg.getWant(),
    so: msg.getSo(),
    statusbacklog: msg.getStatusbacklog(),
    priority: msg.getPriority(),
    estimation: msg.getEstimation(),
    sprintid: msg.getSprintid(),
    start: msg.getStart(),
    deadline: msg.getDeadline(),
    status: msg.getStatus(),
    sprintname: msg.getSprintname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sprintbacklog.GetAllSprintBacklogRes}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sprintbacklog.GetAllSprintBacklogRes;
  return proto.sprintbacklog.GetAllSprintBacklogRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sprintbacklog.GetAllSprintBacklogRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sprintbacklog.GetAllSprintBacklogRes}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBacklogid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWant(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSo(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusbacklog(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEstimation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadline(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.sprintbacklog.GetAllSprintBacklogRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.GetAllSprintBacklogRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBacklogid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getWant();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getStatusbacklog();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getPriority();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getEstimation();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getSprintid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getStart();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getDeadline();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getSprintname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.sprintbacklog.GetAllSprintBacklogRes} The clone.
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.cloneMessage = function() {
  return /** @type {!proto.sprintbacklog.GetAllSprintBacklogRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string backlogId = 2;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getBacklogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setBacklogid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string role = 3;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setRole = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string want = 4;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getWant = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setWant = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string so = 5;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getSo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setSo = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string statusBacklog = 11;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getStatusbacklog = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setStatusbacklog = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string priority = 6;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setPriority = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string estimation = 7;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getEstimation = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setEstimation = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string sprintId = 8;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getSprintid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string start = 12;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setStart = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string deadline = 10;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getDeadline = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setDeadline = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string status = 9;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string sprintName = 13;
 * @return {string}
 */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.getSprintname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.sprintbacklog.GetAllSprintBacklogRes.prototype.setSprintname = function(value) {
  jspb.Message.setField(this, 13, value);
};


goog.object.extend(exports, proto.sprintbacklog);
