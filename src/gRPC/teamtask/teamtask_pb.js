/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.teamtask.AddNewTeamTaskReq', null, global);
goog.exportSymbol('proto.teamtask.CancelTeamTaskReq', null, global);
goog.exportSymbol('proto.teamtask.GetAllTeamTaskReq', null, global);
goog.exportSymbol('proto.teamtask.GetAllTeamTaskRes', null, global);
goog.exportSymbol('proto.teamtask.RegisterTeamTaskReq', null, global);
goog.exportSymbol('proto.teamtask.TeamTaskRes', null, global);
goog.exportSymbol('proto.teamtask.UpdateTeamTaskReq', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teamtask.AddNewTeamTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teamtask.AddNewTeamTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.teamtask.AddNewTeamTaskReq.displayName = 'proto.teamtask.AddNewTeamTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.teamtask.AddNewTeamTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teamtask.AddNewTeamTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.teamtask.AddNewTeamTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    title: msg.getTitle(),
    description: msg.getDescription(),
    priority: msg.getPriority(),
    start: msg.getStart(),
    deadline: msg.getDeadline(),
    assigneearray: msg.getAssigneearray(),
    comment: msg.getComment(),
    status: msg.getStatus(),
    review: msg.getReview(),
    accesstoken: msg.getAccesstoken(),
    sprintid: msg.getSprintid(),
    teamid: msg.getTeamid(),
    sprintbacklogid: msg.getSprintbacklogid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teamtask.AddNewTeamTaskReq}
 */
proto.teamtask.AddNewTeamTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teamtask.AddNewTeamTaskReq;
  return proto.teamtask.AddNewTeamTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teamtask.AddNewTeamTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teamtask.AddNewTeamTaskReq}
 */
proto.teamtask.AddNewTeamTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadline(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigneearray(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setReview(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintbacklogid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.teamtask.AddNewTeamTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.AddNewTeamTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.AddNewTeamTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPriority();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getStart();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getDeadline();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getAssigneearray();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getComment();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getReview();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getSprintid();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getSprintbacklogid();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.teamtask.AddNewTeamTaskReq} The clone.
 */
proto.teamtask.AddNewTeamTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.teamtask.AddNewTeamTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string priority = 5;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setPriority = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string start = 6;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setStart = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string deadline = 7;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getDeadline = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setDeadline = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string assigneeArray = 8;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getAssigneearray = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setAssigneearray = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string comment = 9;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setComment = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string status = 10;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string review = 11;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getReview = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setReview = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string accessToken = 12;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string sprintId = 14;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getSprintid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 14, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string teamId = 13;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string sprintBacklogId = 15;
 * @return {string}
 */
proto.teamtask.AddNewTeamTaskReq.prototype.getSprintbacklogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 15, ""));
};


/** @param {string} value  */
proto.teamtask.AddNewTeamTaskReq.prototype.setSprintbacklogid = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teamtask.TeamTaskRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teamtask.TeamTaskRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.teamtask.TeamTaskRes.displayName = 'proto.teamtask.TeamTaskRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teamtask.TeamTaskRes.prototype.toObject = function(opt_includeInstance) {
  return proto.teamtask.TeamTaskRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teamtask.TeamTaskRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.teamtask.TeamTaskRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus(),
    teamtaskid: msg.getTeamtaskid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teamtask.TeamTaskRes}
 */
proto.teamtask.TeamTaskRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teamtask.TeamTaskRes;
  return proto.teamtask.TeamTaskRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teamtask.TeamTaskRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teamtask.TeamTaskRes}
 */
proto.teamtask.TeamTaskRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamtaskid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.teamtask.TeamTaskRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.TeamTaskRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teamtask.TeamTaskRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.TeamTaskRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTeamtaskid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.teamtask.TeamTaskRes} The clone.
 */
proto.teamtask.TeamTaskRes.prototype.cloneMessage = function() {
  return /** @type {!proto.teamtask.TeamTaskRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.teamtask.TeamTaskRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.teamtask.TeamTaskRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string teamTaskId = 2;
 * @return {string}
 */
proto.teamtask.TeamTaskRes.prototype.getTeamtaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.teamtask.TeamTaskRes.prototype.setTeamtaskid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teamtask.UpdateTeamTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teamtask.UpdateTeamTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.teamtask.UpdateTeamTaskReq.displayName = 'proto.teamtask.UpdateTeamTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.teamtask.UpdateTeamTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teamtask.UpdateTeamTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.teamtask.UpdateTeamTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    teamtaskid: msg.getTeamtaskid(),
    title: msg.getTitle(),
    description: msg.getDescription(),
    priority: msg.getPriority(),
    start: msg.getStart(),
    deadline: msg.getDeadline(),
    assigneearray: msg.getAssigneearray(),
    comment: msg.getComment(),
    status: msg.getStatus(),
    review: msg.getReview(),
    accesstoken: msg.getAccesstoken(),
    teamid: msg.getTeamid(),
    sprintid: msg.getSprintid(),
    sprintbacklogid: msg.getSprintbacklogid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teamtask.UpdateTeamTaskReq}
 */
proto.teamtask.UpdateTeamTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teamtask.UpdateTeamTaskReq;
  return proto.teamtask.UpdateTeamTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teamtask.UpdateTeamTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teamtask.UpdateTeamTaskReq}
 */
proto.teamtask.UpdateTeamTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamtaskid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadline(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigneearray(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setReview(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintid(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintbacklogid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.teamtask.UpdateTeamTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.UpdateTeamTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.UpdateTeamTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTeamtaskid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getPriority();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getStart();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getDeadline();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getAssigneearray();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getComment();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getReview();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getSprintid();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getSprintbacklogid();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.teamtask.UpdateTeamTaskReq} The clone.
 */
proto.teamtask.UpdateTeamTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.teamtask.UpdateTeamTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string teamTaskId = 3;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getTeamtaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setTeamtaskid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string priority = 6;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setPriority = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string start = 7;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setStart = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string deadline = 8;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getDeadline = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setDeadline = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string assigneeArray = 9;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getAssigneearray = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setAssigneearray = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string comment = 10;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setComment = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string status = 11;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string review = 12;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getReview = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setReview = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string accessToken = 13;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string teamId = 14;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 14, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string sprintId = 15;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getSprintid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 15, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string sprintBacklogId = 16;
 * @return {string}
 */
proto.teamtask.UpdateTeamTaskReq.prototype.getSprintbacklogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 16, ""));
};


/** @param {string} value  */
proto.teamtask.UpdateTeamTaskReq.prototype.setSprintbacklogid = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teamtask.RegisterTeamTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teamtask.RegisterTeamTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.teamtask.RegisterTeamTaskReq.displayName = 'proto.teamtask.RegisterTeamTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teamtask.RegisterTeamTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.teamtask.RegisterTeamTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teamtask.RegisterTeamTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.teamtask.RegisterTeamTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    teamtaskid: msg.getTeamtaskid(),
    accesstoken: msg.getAccesstoken(),
    teamid: msg.getTeamid(),
    assigner: msg.getAssigner()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teamtask.RegisterTeamTaskReq}
 */
proto.teamtask.RegisterTeamTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teamtask.RegisterTeamTaskReq;
  return proto.teamtask.RegisterTeamTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teamtask.RegisterTeamTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teamtask.RegisterTeamTaskReq}
 */
proto.teamtask.RegisterTeamTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamtaskid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.teamtask.RegisterTeamTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.RegisterTeamTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teamtask.RegisterTeamTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.RegisterTeamTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTeamtaskid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getAssigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.teamtask.RegisterTeamTaskReq} The clone.
 */
proto.teamtask.RegisterTeamTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.teamtask.RegisterTeamTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.teamtask.RegisterTeamTaskReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.teamtask.RegisterTeamTaskReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.teamtask.RegisterTeamTaskReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.teamtask.RegisterTeamTaskReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string teamTaskId = 3;
 * @return {string}
 */
proto.teamtask.RegisterTeamTaskReq.prototype.getTeamtaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.teamtask.RegisterTeamTaskReq.prototype.setTeamtaskid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.teamtask.RegisterTeamTaskReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.teamtask.RegisterTeamTaskReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string teamId = 13;
 * @return {string}
 */
proto.teamtask.RegisterTeamTaskReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.teamtask.RegisterTeamTaskReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string assigner = 5;
 * @return {string}
 */
proto.teamtask.RegisterTeamTaskReq.prototype.getAssigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.teamtask.RegisterTeamTaskReq.prototype.setAssigner = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teamtask.CancelTeamTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teamtask.CancelTeamTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.teamtask.CancelTeamTaskReq.displayName = 'proto.teamtask.CancelTeamTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teamtask.CancelTeamTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.teamtask.CancelTeamTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teamtask.CancelTeamTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.teamtask.CancelTeamTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    teamtaskid: msg.getTeamtaskid(),
    accesstoken: msg.getAccesstoken(),
    teamid: msg.getTeamid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teamtask.CancelTeamTaskReq}
 */
proto.teamtask.CancelTeamTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teamtask.CancelTeamTaskReq;
  return proto.teamtask.CancelTeamTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teamtask.CancelTeamTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teamtask.CancelTeamTaskReq}
 */
proto.teamtask.CancelTeamTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamtaskid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.teamtask.CancelTeamTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.CancelTeamTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teamtask.CancelTeamTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.CancelTeamTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTeamtaskid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.teamtask.CancelTeamTaskReq} The clone.
 */
proto.teamtask.CancelTeamTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.teamtask.CancelTeamTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.teamtask.CancelTeamTaskReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.teamtask.CancelTeamTaskReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.teamtask.CancelTeamTaskReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.teamtask.CancelTeamTaskReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string teamTaskId = 3;
 * @return {string}
 */
proto.teamtask.CancelTeamTaskReq.prototype.getTeamtaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.teamtask.CancelTeamTaskReq.prototype.setTeamtaskid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.teamtask.CancelTeamTaskReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.teamtask.CancelTeamTaskReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string teamId = 13;
 * @return {string}
 */
proto.teamtask.CancelTeamTaskReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.teamtask.CancelTeamTaskReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teamtask.GetAllTeamTaskReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teamtask.GetAllTeamTaskReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.teamtask.GetAllTeamTaskReq.displayName = 'proto.teamtask.GetAllTeamTaskReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teamtask.GetAllTeamTaskReq.prototype.toObject = function(opt_includeInstance) {
  return proto.teamtask.GetAllTeamTaskReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teamtask.GetAllTeamTaskReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.teamtask.GetAllTeamTaskReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: msg.getRequesterid(),
    projectid: msg.getProjectid(),
    accesstoken: msg.getAccesstoken(),
    teamid: msg.getTeamid(),
    sprintid: msg.getSprintid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teamtask.GetAllTeamTaskReq}
 */
proto.teamtask.GetAllTeamTaskReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teamtask.GetAllTeamTaskReq;
  return proto.teamtask.GetAllTeamTaskReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teamtask.GetAllTeamTaskReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teamtask.GetAllTeamTaskReq}
 */
proto.teamtask.GetAllTeamTaskReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.teamtask.GetAllTeamTaskReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.GetAllTeamTaskReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teamtask.GetAllTeamTaskReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.GetAllTeamTaskReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequesterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getSprintid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.teamtask.GetAllTeamTaskReq} The clone.
 */
proto.teamtask.GetAllTeamTaskReq.prototype.cloneMessage = function() {
  return /** @type {!proto.teamtask.GetAllTeamTaskReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requesterId = 1;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskReq.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskReq.prototype.setRequesterid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskReq.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskReq.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskReq.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskReq.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string teamId = 13;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskReq.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskReq.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string sprintId = 4;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskReq.prototype.getSprintid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskReq.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teamtask.GetAllTeamTaskRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teamtask.GetAllTeamTaskRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.teamtask.GetAllTeamTaskRes.displayName = 'proto.teamtask.GetAllTeamTaskRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.toObject = function(opt_includeInstance) {
  return proto.teamtask.GetAllTeamTaskRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teamtask.GetAllTeamTaskRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.teamtask.GetAllTeamTaskRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamtaskid: msg.getTeamtaskid(),
    title: msg.getTitle(),
    description: msg.getDescription(),
    priority: msg.getPriority(),
    start: msg.getStart(),
    deadline: msg.getDeadline(),
    assigneearray: msg.getAssigneearray(),
    comment: msg.getComment(),
    statusteamtask: msg.getStatusteamtask(),
    status: msg.getStatus(),
    review: msg.getReview(),
    teamid: msg.getTeamid(),
    sprintbacklogid: msg.getSprintbacklogid(),
    sprintid: msg.getSprintid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teamtask.GetAllTeamTaskRes}
 */
proto.teamtask.GetAllTeamTaskRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teamtask.GetAllTeamTaskRes;
  return proto.teamtask.GetAllTeamTaskRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teamtask.GetAllTeamTaskRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teamtask.GetAllTeamTaskRes}
 */
proto.teamtask.GetAllTeamTaskRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamtaskid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadline(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigneearray(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusteamtask(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReview(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamid(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintbacklogid(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSprintid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.teamtask.GetAllTeamTaskRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.GetAllTeamTaskRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.teamtask.GetAllTeamTaskRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTeamtaskid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPriority();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getStart();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getDeadline();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getAssigneearray();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getComment();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getStatusteamtask();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getReview();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getTeamid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getSprintbacklogid();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getSprintid();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.teamtask.GetAllTeamTaskRes} The clone.
 */
proto.teamtask.GetAllTeamTaskRes.prototype.cloneMessage = function() {
  return /** @type {!proto.teamtask.GetAllTeamTaskRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string teamTaskId = 1;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getTeamtaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setTeamtaskid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string priority = 4;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setPriority = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string start = 5;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setStart = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string deadline = 6;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getDeadline = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setDeadline = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string assigneeArray = 7;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getAssigneearray = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setAssigneearray = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string comment = 8;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setComment = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string statusTeamTask = 12;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getStatusteamtask = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setStatusteamtask = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string status = 9;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string review = 10;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getReview = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setReview = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string teamId = 13;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string sprintBacklogId = 14;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getSprintbacklogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 14, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setSprintbacklogid = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string sprintId = 15;
 * @return {string}
 */
proto.teamtask.GetAllTeamTaskRes.prototype.getSprintid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 15, ""));
};


/** @param {string} value  */
proto.teamtask.GetAllTeamTaskRes.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 15, value);
};


goog.object.extend(exports, proto.teamtask);
